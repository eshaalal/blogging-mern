{
  "version": 3,
  "sources": ["../valtio/esm/index.js"],
  "sourcesContent": ["import { snapshot, subscribe, getVersion } from 'valtio/vanilla';\nexport * from 'valtio/vanilla';\nimport { useRef, useState, useEffect, useReducer, useCallback, useMemo, useLayoutEffect, useDebugValue } from 'react';\nimport { isChanged, createProxy, affectedToPathList } from 'proxy-compare';\n\nconst TARGET = Symbol();\nconst GET_VERSION = Symbol();\nconst createMutableSource = (target, getVersion) => ({\n  [TARGET]: target,\n  [GET_VERSION]: getVersion\n});\nconst useMutableSource = (source, getSnapshot, subscribe) => {\n  const lastVersion = useRef(0);\n  const currentVersion = source[GET_VERSION](source[TARGET]);\n  const [state, setState] = useState(() => [\n    source,\n    getSnapshot,\n    subscribe,\n    currentVersion,\n    getSnapshot(source[TARGET])\n  ]);\n  let currentSnapshot = state[4];\n  if (state[0] !== source || state[1] !== getSnapshot || state[2] !== subscribe) {\n    currentSnapshot = getSnapshot(source[TARGET]);\n    setState([\n      source,\n      getSnapshot,\n      subscribe,\n      currentVersion,\n      currentSnapshot\n    ]);\n  } else if (currentVersion !== state[3] && currentVersion !== lastVersion.current) {\n    currentSnapshot = getSnapshot(source[TARGET]);\n    if (!Object.is(currentSnapshot, state[4])) {\n      setState([\n        source,\n        getSnapshot,\n        subscribe,\n        currentVersion,\n        currentSnapshot\n      ]);\n    }\n  }\n  useEffect(() => {\n    let didUnsubscribe = false;\n    const checkForUpdates = () => {\n      if (didUnsubscribe) {\n        return;\n      }\n      try {\n        const nextSnapshot = getSnapshot(source[TARGET]);\n        const nextVersion = source[GET_VERSION](source[TARGET]);\n        lastVersion.current = nextVersion;\n        setState((prev) => {\n          if (prev[0] !== source || prev[1] !== getSnapshot || prev[2] !== subscribe) {\n            return prev;\n          }\n          if (Object.is(prev[4], nextSnapshot)) {\n            return prev;\n          }\n          return [\n            prev[0],\n            prev[1],\n            prev[2],\n            nextVersion,\n            nextSnapshot\n          ];\n        });\n      } catch (e) {\n        setState((prev) => [...prev]);\n      }\n    };\n    const unsubscribe = subscribe(source[TARGET], checkForUpdates);\n    checkForUpdates();\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [source, getSnapshot, subscribe]);\n  return currentSnapshot;\n};\n\nconst isSSR = typeof window === \"undefined\" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\nconst useAffectedDebugValue = (state, affected) => {\n  const pathList = useRef();\n  useEffect(() => {\n    pathList.current = affectedToPathList(state, affected);\n  });\n  useDebugValue(pathList.current);\n};\nconst mutableSourceCache = new WeakMap();\nconst getMutableSource = (proxyObject) => {\n  if (!mutableSourceCache.has(proxyObject)) {\n    mutableSourceCache.set(proxyObject, createMutableSource(proxyObject, getVersion));\n  }\n  return mutableSourceCache.get(proxyObject);\n};\nconst useSnapshot = (proxyObject, options) => {\n  const forceUpdate = useReducer((c) => c + 1, 0)[1];\n  const affected = new WeakMap();\n  const lastAffected = useRef();\n  const prevSnapshot = useRef();\n  const lastSnapshot = useRef();\n  useIsomorphicLayoutEffect(() => {\n    lastSnapshot.current = prevSnapshot.current = snapshot(proxyObject);\n  }, [proxyObject]);\n  useIsomorphicLayoutEffect(() => {\n    lastAffected.current = affected;\n    if (prevSnapshot.current !== lastSnapshot.current && isChanged(prevSnapshot.current, lastSnapshot.current, affected, new WeakMap())) {\n      prevSnapshot.current = lastSnapshot.current;\n      forceUpdate();\n    }\n  });\n  const notifyInSync = options == null ? void 0 : options.sync;\n  const sub = useCallback((proxyObject2, cb) => subscribe(proxyObject2, () => {\n    const nextSnapshot = snapshot(proxyObject2);\n    lastSnapshot.current = nextSnapshot;\n    try {\n      if (lastAffected.current && !isChanged(prevSnapshot.current, nextSnapshot, lastAffected.current, new WeakMap())) {\n        return;\n      }\n    } catch (e) {\n    }\n    prevSnapshot.current = nextSnapshot;\n    cb();\n  }, notifyInSync), [notifyInSync]);\n  const currSnapshot = useMutableSource(getMutableSource(proxyObject), snapshot, sub);\n  if (typeof process === \"object\" && process.env.NODE_ENV !== \"production\") {\n    useAffectedDebugValue(currSnapshot, affected);\n  }\n  const proxyCache = useMemo(() => new WeakMap(), []);\n  return createProxy(currSnapshot, affected, proxyCache);\n};\n\nexport { useSnapshot };\n"],
  "mappings": "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",
  "names": []
}
