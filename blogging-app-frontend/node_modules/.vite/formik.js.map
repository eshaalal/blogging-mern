{
  "version": 3,
  "sources": ["../react-fast-compare/index.js", "../hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js", "../deepmerge/dist/es.js", "../tiny-warning/dist/tiny-warning.esm.js", "../formik/src/utils.ts", "../formik/src/FormikContext.tsx", "../formik/src/Formik.tsx", "../formik/src/Field.tsx", "../formik/src/Form.tsx", "../formik/src/withFormik.tsx", "../formik/src/connect.tsx", "../formik/src/FieldArray.tsx", "../formik/src/ErrorMessage.tsx", "../formik/src/FastField.tsx"],
  "sourcesContent": ["'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\nvar hasElementType = typeof Element !== 'undefined';\n\nfunction equal(a, b) {\n  // fast-deep-equal index.js 2.0.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n    // end fast-deep-equal\n\n    // start react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element && b instanceof Element)\n      return a === b;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      } else {\n        // all other properties should be traversed as usual\n        if (!equal(a[key], b[key])) return false;\n      }\n    }\n    // end react-fast-compare\n\n    // fast-deep-equal index.js 2.0.1\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function exportedEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n", "'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n", "var isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nexport default deepmerge_1;\n", "var isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nexport default warning;\n", "import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n", "import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nFormikContext.displayName = 'FormikContext';\n\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n", "import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FormikHelpers,\n  FormikHandlers,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  isObject,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport invariant from 'tiny-warning';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value) as string)\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (\n      validateOnMount &&\n      isMounted.current === true &&\n      isEqual(initialValues.current, props.initialValues)\n    ) {\n      validateFormWithHighPriority(initialValues.current);\n    }\n  }, [validateOnMount, validateFormWithHighPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      if (enableReinitialize) {\n        initialValues.current = props.initialValues;\n        resetForm();\n      }\n\n      if (validateOnMount) {\n        validateFormWithHighPriority(initialValues.current);\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    resetForm,\n    validateOnMount,\n    validateFormWithHighPriority,\n  ]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: error[name] },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : options && multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject ? nameOrOptions.name : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  const validateData: FormikValues = prepareDataForValidation(values);\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n", "import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<V>>\n    | React.ComponentType\n    | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n    | React.ComponentType<FieldProps<V>['field']>\n    | string\n    | React.ComponentType\n    | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<V>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<V>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes &\n  FieldConfig<T> &\n  T & { name: string };\n\nexport type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>;\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldHookConfig<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    registerField,\n    unregisterField,\n  } = formik;\n\n  const isAnObject = isObject(propsOrFieldName);\n\n  // Normalize propsOrFieldName to FieldHookConfig<Val>\n  const props: FieldHookConfig<Val> = isAnObject\n    ? (propsOrFieldName as FieldHookConfig<Val>)\n    : { name: propsOrFieldName as string };\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  invariant(\n    fieldName,\n    'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n  );\n\n  return [\n    getFieldProps(props),\n    getFieldMeta(fieldName),\n    getFieldHelpers(fieldName),\n  ];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props }, children);\n}\n", "import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action ?? '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n", "import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik helpers + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form status\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form errors state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n", "import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.FC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentType<OuterProps>;\n}\n", "import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  setIn,\n  isEmptyArray,\n} from './utils';\nimport isEqual from 'react-fast-compare';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (\n  arrayLike: ArrayLike<any>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n      let updateTouched =\n        typeof alterTouched === 'function' ? alterTouched : fn;\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n", "import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n", "import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"],
  "mappings": "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",
  "names": []
}
